package com.kh.practice.map.controller;

import java.util.HashMap;
import java.util.TreeMap;

import com.kh.practice.map.model.vo.Member;

public class MemberController {

	private HashMap map = new HashMap();

	public boolean joinMembership(String id, Member m) {

		// map에 id가 없다면 id와 m을 map에 추가 후 true 반환
		if (!map.containsKey(id)) {
			map.put(id, m);
			return true;
		}
		// 있다면 false 값 반환
		else {
			return false;
		}
	}

	public String lonIn(String id, String password) {
		
		Member m = (Member)map.get(id);	// Map에서 id(key)에 해당하는 데이터를 조회
		
		if (m != null) {	// 데이터가 있다면..
			if (m.getPassword().equals(password)) {		//저장된 비밀번호와 전달된 비밀번호를 비교
				return m.getName();		// 같다면, 해당 객체의 이름 데이터를 반환
			} else {
				return null;
				// 같다면 저장된 Member의 이름 반환, 그 외 모든 상황에는 null 반환
			}
		} else {		// 그 외에 모든 경우는 null 반환
			return null;
		}

	}

	public boolean changePassword(String id, String oldPw, String newPw) {
		Member m = (Member)map.get(id);	// id에 해당하는 객체를 Map에서 조회
		
		if(m != null) {				// 데이터가 있다면
			if(m.getPassword().equals(oldPw)) {	// 저장된 비밀번호와 입력된 기존 비밀번호가 같다면
				//새로운 비밀번호로 변경
				m.setPassword(newPw);	//map 저장된 객체의 주소를 m 참조변수가 가리키고 있으므로 stter로 처리 가능
				
				return true;
			}
		}
		return false;
	}

	public void changeName(String id, String newName) {
		if (map.containsKey(id)) {
			Member m = (Member)map.get(id);
			m.setName(newName);
		}
	}

	public TreeMap sameName(String name) {
		return TreeMap;
	}
}
